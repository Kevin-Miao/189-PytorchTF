answers: 
1) tf.convert_to_tensor(dataset, dtype = np.float32)  
2) filter_height, filter_width, channels_input, channels_output  
3) tf.nn.conv2d(data, filters, ...)  
4) tf.keras.layers.Conv2D(filters = 3, kernel_size = 5, strides = [2, 2],...) 
5) 0, 0
6) 0, 1
7) 0, 2
8) data
9) 
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu',
                           input_shape=(100, 100, 3)),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(131, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()